1.1 Is Unique - Implement a algorithm to determine if a string has all unique 
characters. What if you cant use any additional data structures ?

1.2 Check Permutation - Given two strings , write a method to decide if one is 
a permutation of the other 

1.3 URLify  - Write a method to replace all the spaces in a string with %20 . You may
assume that the string has sufficient space at the end to hold the additional characters 
and that you are given the "true" length of the string. If implementing in Java use a 
character array to perform the operation in-place

Example:
Input - "Mr John Smith   ", 13
Output - "Mr%20John%Smith"

1.4 Palindrome Permutation: Given a string, write a function to check if it is a permutation
of a palindrome. A palindrome is a word or phrase that is the same forward and backwards. 
A permutation is a rearrangement of letters. The palindrome does not need to be restricted to 
just dictionary words.

Example
Input : Tact Coa
Output: True(permutations: 'taco cat', 'atco cta', etc.)

1.5 One Away : There are three types of edits that can be performed on strings: insert a 
character, remove a character, or replace a character. Given two strings, write a function to
check if they are one (or zero) edits away.
Example
pale, ple --> true
pales, pale -> true
pale, bale -> true
pale, bake -> false 

1.6 String Compression : Implement a method to perform basic string compression using the 
counts of repeated characters. For example the string aabbcccccaaa would become a2b1c5a3. If 
the compressed string is not smaller than the original string the method should return the 
original string. Assume the string only has upper and lower case letters 

1.7 Rotate Matrix : Given a image represented by an NxN matrix , where each pixel in the image 
is 4 bytes, write a method to rotate the image by 90 degrees. Can this be done in-place ?

1.8 Zero Matrix : Write a algorithm such that if an element in a MxN matrix is 0, the entire row
and column are set to zero 

1.9 String Rotation: Assume you have a method isSubstring which checks if one word is a substring 
of another. Given two strings, s1 and s2, write code to check if s2 is a rotation of s1 with only
one call to isSubstring(eg. 'waterbottle' is a rotation of 'erbottlewat')